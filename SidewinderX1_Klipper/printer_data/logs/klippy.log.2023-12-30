=============== Log rollover at Sat Dec 30 21:21:23 2023 ===============
Starting Klippy...
Args: ['/home/pi/klipper/klippy/klippy.py', '/home/pi/printer_data/config/printer.cfg', '-I', '/home/pi/printer_data/comms/klippy.serial', '-l', '/home/pi/printer_data/logs/klippy.log', '-a', '/home/pi/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-12-g38221df8-dirty'
Untracked files: klippy/extras/gcode_shell_command.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.11.2 (main, Mar 13 2023, 12:18:29) [GCC 12.2.0]'
Start printer at Sat Dec 30 21:21:24 2023 (1703989284.6 21.4)
===== Config file =====
[gcode_shell_command hello_world]
command = echo hello world
timeout = 2.
verbose = True

[gcode_macro HELLO_WORLD]
gcode = 
	RUN_SHELL_COMMAND CMD=hello_world

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]
recover_velocity = 50.

[display_status]

[respond]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	{client.user_cancel_macro|default("")}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	{client.user_pause_macro|default("")}
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
variable_restore_idle_timeout = 0
variable_idle_state = False
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	{% set runout_resume = True if client.runout_sensor|default("") == ""
	else True if not printer[client.runout_sensor].enabled
	else printer[client.runout_sensor].filament_detected %}
	{% set can_extrude = True if printer.toolhead.extruder == ''
	else printer[printer.toolhead.extruder].can_extrude %}
	{% set do_resume = False %}
	
	
	{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
	{% if last_extruder_temp.restore %}
	
	RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
	M109 S{last_extruder_temp.temp}
	{% set do_resume = True %}
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% endif %}
	
	{% elif can_extrude %}
	{% set do_resume = True %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
	{% endif %}
	{% if runout_resume %}
	{% if do_resume %}
	{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}
	{client.user_resume_macro|default("")}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
	{% endif %}
	{% else %}
	RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
	{% endif %}

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[stepper_x]
step_pin = ar54
dir_pin = ar55
enable_pin = !ar38
microsteps = 16
rotation_distance = 40
endstop_pin = ^!ar3
position_endstop = 0
position_max = 310
homing_speed = 60

[stepper_y]
step_pin = ar60
dir_pin = ar61
enable_pin = !ar56
microsteps = 16
rotation_distance = 40
endstop_pin = ^!ar14
position_endstop = 0
position_max = 310
homing_speed = 60
homing_positive_dir = false

[stepper_z]
step_pin = ar46
dir_pin = !ar48
enable_pin = !ar62
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_min = -3
position_max = 400
homing_speed = 20
second_homing_speed = 1

[stepper_z1]
step_pin = ar36
dir_pin = !ar34
enable_pin = !ar30
microsteps = 16
rotation_distance = 8

[extruder]
step_pin = ar26
dir_pin = ar28
enable_pin = !ar24
microsteps = 16
rotation_distance = 7.504
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = ar10
sensor_type = EPCOS 100K B57560G104F
sensor_pin = analog13
min_extrude_temp = 170
min_temp = 5
max_temp = 240
max_extrude_only_distance = 500
max_extrude_cross_section = 2.0
control = pid
pid_kp = 17.519
pid_ki = 0.645
pid_kd = 118.907

[heater_bed]
heater_pin = ar8
sensor_type = EPCOS 100K B57560G104F
sensor_pin = analog14
min_temp = 5
max_temp = 150
control = pid
pid_kp = 51.355
pid_ki = 0.699
pid_kd = 943.643

[fan]
pin = ar9
kick_start_time = 0.500

[heater_fan my_nozzle_fan]
pin = ar7
heater = extruder
heater_temp = 50.0
fan_speed = 1.0

[mcu]
serial = /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 3000
max_z_velocity = 50
max_z_accel = 100
square_corner_velocity = 5

[probe]
pin = ^!ar18
x_offset = 28.0
y_offset = -33.0
speed = 10.0
samples = 1
samples_result = average
z_offset = 0.935

[safe_z_home]
home_xy_position = 122,183
speed = 100
z_hop = 20
z_hop_speed = 20

[bed_mesh]
speed = 800
mesh_min = 30,30
mesh_max = 270,270
probe_count = 5,5
mesh_pps = 2,2
algorithm = bicubic
bicubic_tension = 0.2
move_check_distance = 3.0
split_delta_z = .010
fade_start = 1.0
fade_end = 5.0

[bed_screws]
screw1 = 55,55
screw1_name = front left
screw2 = 255,55
screw2_name = front right
screw3 = 255,255
screw3_name = back right
screw4 = 55,255
screw4_name = back left
speed = 100.0

[screws_tilt_adjust]
screw1 = 22,83
screw1_name = front left
screw2 = 222,83
screw2_name = front right
screw3 = 22,283
screw3_name = back left
screw4 = 222,283
screw4_name = back right
speed = 100.0
screw_thread = CW-M5

[exclude_object]

[mcu rpi]
serial = /tmp/klipper_host_mcu

[gcode_macro G29]
gcode = 
	BED_MESH_CLEAR
	G28
	BED_MESH_CALIBRATE
	BED_MESH_PROFILE SAVE=x1

[gcode_macro START_PRINT]
gcode = 
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	M140 S{BED_TEMP}
	
	
	
	G28
	
	G28 X Y
	
	
	
	BED_MESH_PROFILE LOAD=x1
	
	G90
	
	M190 S{BED_TEMP}
	
	M109 S{EXTRUDER_TEMP}
	
	
	G28 Z
	
	G28 X Y
	
	
	G1 X0 Y0 Z5 F3000
	
	G1 Z0.15 F300
	G92 E0
	G1 X20 Y5 Z0.3 F5000.0
	G1 Z0.3 F1000
	G1 X200 Y5 F1500.0 E15
	G1 X200 Y5.3 Z0.3 F5000.0
	G1 X5.3  Y5.3 Z0.3 F1500.0 E30
	G1 Z3 F3000
	G21
	G90
	M83
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z30 F3000
	G90
	
	M84

[filament_switch_sensor RUNOUT]
pause_on_runout = False
runout_gcode = PAUSE
insert_gcode = RESUME
switch_pin = rpi:gpio27

[gcode_macro update_git]
gcode = 
	RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command = bash /home/pi/printer_data/klipper-backup/script.sh
timeout = 90.0
verbose = True

[board_pins arduino-mega]
aliases = 
	ar0=PE0, ar1=PE1, ar2=PE4, ar3=PE5, ar4=PG5,
	ar5=PE3, ar6=PH3, ar7=PH4, ar8=PH5, ar9=PH6,
	ar10=PB4, ar11=PB5, ar12=PB6, ar13=PB7, ar14=PJ1,
	ar15=PJ0, ar16=PH1, ar17=PH0, ar18=PD3, ar19=PD2,
	ar20=PD1, ar21=PD0, ar22=PA0, ar23=PA1, ar24=PA2,
	ar25=PA3, ar26=PA4, ar27=PA5, ar28=PA6, ar29=PA7,
	ar30=PC7, ar31=PC6, ar32=PC5, ar33=PC4, ar34=PC3,
	ar35=PC2, ar36=PC1, ar37=PC0, ar38=PD7, ar39=PG2,
	ar40=PG1, ar41=PG0, ar42=PL7, ar43=PL6, ar44=PL5,
	ar45=PL4, ar46=PL3, ar47=PL2, ar48=PL1, ar49=PL0,
	ar50=PB3, ar51=PB2, ar52=PB1, ar53=PB0, ar54=PF0,
	ar55=PF1, ar56=PF2, ar57=PF3, ar58=PF4, ar59=PF5,
	ar60=PF6, ar61=PF7, ar62=PK0, ar63=PK1, ar64=PK2,
	ar65=PK3, ar66=PK4, ar67=PK5, ar68=PK6, ar69=PK7,
	analog0=PF0, analog1=PF1, analog2=PF2, analog3=PF3, analog4=PF4,
	analog5=PF5, analog6=PF6, analog7=PF7, analog8=PK0, analog9=PK1,
	analog10=PK2, analog11=PK3, analog12=PK4, analog13=PK5, analog14=PK6,
	analog15=PK7,
	
	ml70=PG4, ml71=PG3, ml72=PJ2, ml73=PJ3, ml74=PJ7,
	ml75=PJ4, ml76=PJ5, ml77=PJ6, ml78=PE2, ml79=PE6,
	ml80=PE7, ml81=PD4, ml82=PD5, ml83=PD6, ml84=PH2,
	ml85=PH7

[bed_mesh default]
version = 1
points = 
	0.060000, 0.022500, -0.040000, -0.135000, -0.250000
	0.035000, -0.015000, -0.005000, -0.057500, -0.167500
	0.025000, 0.027500, 0.010000, -0.072500, -0.170000
	-0.112500, -0.092500, -0.040000, -0.090000, -0.140000
	-0.232500, -0.175000, -0.137500, -0.115000, -0.157500
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 30.0
max_x = 270.0
min_y = 30.0
max_y = 270.0

[bed_mesh x1]
version = 1
points = 
	-0.020000, 0.022500, 0.035000, 0.112500, 0.220000
	-0.055000, -0.050000, -0.015000, 0.047500, 0.125000
	-0.062500, -0.037500, -0.007500, 0.060000, 0.155000
	0.092500, 0.035000, 0.005000, 0.022500, 0.030000
	0.017500, -0.042500, -0.055000, -0.052500, 0.000000
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 30.0
max_x = 270.0
min_y = 30.0000000001
max_y = 270.0

[bed_mesh smooth]
version = 1
points = 
	0.060000, 0.022500, -0.040000, -0.135000, -0.250000
	0.035000, -0.015000, -0.005000, -0.057500, -0.167500
	0.025000, 0.027500, 0.010000, -0.072500, -0.170000
	-0.112500, -0.092500, -0.040000, -0.090000, -0.140000
	-0.232500, -0.175000, -0.137500, -0.115000, -0.157500
x_count = 5
y_count = 5
mesh_x_pps = 2
mesh_y_pps = 2
algo = bicubic
tension = 0.2
min_x = 30.0
max_x = 270.0
min_y = 30.0
max_y = 270.0
=======================
Extruder max_extrude_ratio=0.831503
mcu 'mcu': Starting serial connect
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
webhooks client 547690796176: New connection
webhooks client 547690796176: Client info {'program': 'Moonraker', 'version': 'v0.8.0-204-gfb15b2a'}
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
mcu 'mcu': Unable to open serial port: [Errno 2] could not open port /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0: [Errno 2] No such file or directory: '/dev/serial/by-id/usb-1a86_USB_Serial-if00-port0'
